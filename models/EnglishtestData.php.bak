<?php

namespace backend\modules\dochub\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

use backend\modules\person\models\Person;
use wowkaster\serializeAttributes\SerializeAttributesBehavior;
/**
 * This is the model class for table "englishtest_data".
 *
 
 * @property integer $ID
 * @property string $ed_title
 * @property string $ed_datechoice
 * @property string $ed_note
 * @property string $ed_confirm
 * @property string $ed_limitseat
 * @property string $ed_round
 * @property string $ed_active_till
 * @property integer $created_at
 * @property integer $created_by
 * @property integer $updated_at
 * @property integer $updated_by
 * @property EnglishtestAttendee[] $englishtestAttendees
 * @property Person $createdBy
 * @property Person $updatedBy
 */
class EnglishtestData extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'englishtest_data';
    }

    public function behaviors()
    {
        return [
            BlameableBehavior::className(),
            TimestampBehavior::className(),
        ];
    }

public $englishtestAttendeesName; 
public $createdByName; 
public $updatedByName; 
/*add rule in [safe]
'englishtestAttendeesName', 'createdByName', 'updatedByName', 
join in searh()
$query->joinWith(['englishtestAttendees', 'createdBy', 'updatedBy', ]);*/
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['ed_title', 'ed_datechoice', 'ed_limitseat','ed_active_till','ed_confirm'], 'required'],
            [['ed_datechoice', 'ed_note','ed_round','ed_confirm'], 'string'],
            [['ed_datechoice','ed_round'], 'safe'],
//            [['ed_active_till'], 'datetime', 'format' => 'php:Y-m-d H:i:s'],
            ['ed_active_till', 'datetime', 'format' => 'php:Y-m-d H:i:s'],
            [['ed_limitseat'], 'integer'],
            [['ed_title'], 'string', 'max' => 255],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => Person::className(), 'targetAttribute' => ['created_by' => 'user_id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => Person::className(), 'targetAttribute' => ['updated_by' => 'user_id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'ID' => 'ID',
            'ed_title' => 'หัวข้อ',
            'ed_datechoice' => 'ห้อง/สถานที่',
            'ed_note' => 'ข้อความอธิบาย',
            'ed_confirm' => 'ข้อความยืนยัน',
            'ed_limitseat' => 'จำนวนที่จำกัด',
            'ed_round' => 'รหัสรอบกิจกรรม',
            'ed_active_till' => 'วันเวลาสอบ/เริ่มกิจกรรม',
            'created_at' => 'สร้างเมื่อ',
            'created_by' => 'สร้างโดย',
            'updated_at' => 'อัพเดตเมื่อ',
            'updated_by' => 'อัพเดตโดย',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEnglishtestAttendees()
    {
        return $this->hasMany(EnglishtestAttendee::className(), ['ed_id' => 'ID']);
		
			/*
			$dataProvider->sort->attributes['englishtestAttendeesName'] = [
				'asc' => ['englishtest_data.name' => SORT_ASC],
				'desc' => ['englishtest_data.name' => SORT_DESC],
			];
			
			->andFilterWhere(['like', 'englishtest_data.name', $this->englishtestAttendeesName])
			->orFilterWhere(['like', 'englishtest_data.name1', $this->englishtestAttendeesName])

			in grid
			[
				'attribute' => 'englishtestAttendeesName',
				'value' => 'englishtestAttendees.name',
				'label' => $searchModel->attributeLabels()['ed_id'],
				'filter' => \EnglishtestAttendee::englishtestAttendeesList,
			],
			*/
    }
    public function getAttendee()
    {
        return $this->hasOne(EnglishtestAttendee::className(), ['ed_id' => 'ID'])->where('username = '.$_SESSION['ldapData']['accountname']);
    }
	public function getEnglishtestAttendeesList()
    {
        $data = $this->englishtestAttendees;
        $doc = '<ul>';
        foreach($data as $key) {
            $doc .= '<li>'.$key->ed_id.'</li>';
        }
        $doc .= '</ul>';
        return $doc;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(Person::className(), ['user_id' => 'created_by']);
		
			/*
			$dataProvider->sort->attributes['createdByName'] = [
				'asc' => ['person.name' => SORT_ASC],
				'desc' => ['person.name' => SORT_DESC],
			];
			
			->andFilterWhere(['like', 'person.name', $this->createdByName])
			->orFilterWhere(['like', 'person.name1', $this->createdByName])

			in grid
			[
				'attribute' => 'createdByName',
				'value' => 'createdBy.name',
				'label' => $searchModel->attributeLabels()['created_by'],
				'filter' => \Person::createdByList,
			],
			*/
    }
	
	public function getCreatedByList()
    {
        $data = $this->createdBy;
        $doc = '<ul>';
        foreach($data as $key) {
            $doc .= '<li>'.$key->created_by.'</li>';
        }
        $doc .= '</ul>';
        return $doc;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(Person::className(), ['user_id' => 'updated_by']);
		
			/*
			$dataProvider->sort->attributes['updatedByName'] = [
				'asc' => ['person.name' => SORT_ASC],
				'desc' => ['person.name' => SORT_DESC],
			];
			
			->andFilterWhere(['like', 'person.name', $this->updatedByName])
			->orFilterWhere(['like', 'person.name1', $this->updatedByName])

			in grid
			[
				'attribute' => 'updatedByName',
				'value' => 'updatedBy.name',
				'label' => $searchModel->attributeLabels()['updated_by'],
				'filter' => \Person::updatedByList,
			],
			*/
    }
	
	public function getUpdatedByList()
    {
        $data = $this->updatedBy;
        $doc = '<ul>';
        foreach($data as $key) {
            $doc .= '<li>'.$key->updated_by.'</li>';
        }
        $doc .= '</ul>';
        return $doc;
    }

public function getEnglishtestDataList(){
		return ArrayHelper::map(self::find()->all(), 'ID', 'title');
	}
    public static function getDistinctround(){
        $q = self::find()->select('ed_round')->asArray()->distinct()->all();
        $orgarr = array();
        foreach($q as $key => $value){
            array_push($orgarr,$value['ed_round']);
        }
//        $tmp = ArrayHelper::map(self::find()->all(), 'year', 'year');
        return $orgarr;
    }
    public function getDateList(){
        $tmp = $this->ed_datechoice;
        $arr = explode(",", $tmp);
        foreach ($arr as $key){
            $list[$key] = Yii::$app->formatter->asDate($key, 'long');
        }
//        print_r($arr);exit();
        return $list;
    }
public static function getCheckexist($eid, $person){
    $exst = self::find()->joinWith('englishtestAttendees')->where([ self::tableName().'.ID' => $eid, 'englishtest_attendee.username' => $person])->one();
    //print_r($exst);exit();
    return $exst;
}

    public function getCheckround($round){
        $count = '';
        if (!empty($round)){
            $tmpeid = self::find()->select('ID')->where(['ed_round' => $round])->asArray()->all();

            foreach ($tmpeid as $key => $value){
                $q = self::find()->joinWith('englishtestAttendees')->where([self::tableName().'.ID' => $value,'englishtest_attendee.username' => $_SESSION['ldapData']['accountname']])->one();
                if(!empty($q)){
                    $count .= $q->ID;
                }
            }
            return $count;
        }else{
            return $count;
        }
        //$exst = self::find()->joinWith('englishtestAttendees')->where([ self::tableName().'.ID' => $eid, 'englishtest_attendee.username' => $person])->one();

        //return $tmpeid;
    }
    public function getSameround(){
        if (!empty($this->ed_round)){
//            return self::find()->where(['ed_round' => $this->ed_round])->all();
            return self::find()->where(['ed_round' => $this->ed_round])->andWhere(['not', 'ID='.$this->ID])->all();
        }
    }

    public function getRemainseat(){
        $count = self::find()->joinWith('englishtestAttendees')->where(['englishtest_attendee.ed_id' => $this->ID])->count();
        $text = ($count < $this->ed_limitseat) ? '<span class="text-success">'.$count.'</span>' : '<span class="text-danger">'.$count.'</span>';
        $result[0] = ($count < $this->ed_limitseat OR $this->ed_limitseat == 0) ? true : false;
        $result[1] = ($this->ed_limitseat == 0) ? 'ไม่จำกัด' : $text.'/'.$this->ed_limitseat;
        return $result;
    }

    public static function getAutoCompleteList(){
        $q = self::find()->select('ed_title')->asArray()->all();
        $orgarr = array();
        foreach($q as $key => $value){
            array_push($orgarr,$value['ed_title']);
        }
        return $orgarr;
    }
    /*


public static function itemsAlias($key) {
        $items = [
            'status' => [
                0 => Yii::t('app', 'ร่าง'),
                1 => Yii::t('app', 'เสนอ'),
                2 => Yii::t('app', 'อนุมัติ'),
                3 => Yii::t('app', 'ไม่อนุมัติ'),
                4 => Yii::t('app', 'คืนแล้ว'),
            ],
            'statusCondition'=>[
                1 => Yii::t('app', 'อนุมัติ'),
                0 => Yii::t('app', 'ไม่อนุมัติ'),
            ]
        ];
        return ArrayHelper::getValue($items, $key, []);
    }

    public function getStatusLabel() {
        $status = ArrayHelper::getValue($this->getItemStatus(), $this->status);
        $status = ($this->status === NULL) ? ArrayHelper::getValue($this->getItemStatus(), 0) : $status;
        switch ($this->status) {
            case 0 :
            case NULL :
                $str = '<span class="label label-warning">' . $status . '</span>';
                break;
            case 1 :
                $str = '<span class="label label-primary">' . $status . '</span>';
                break;
            case 2 :
                $str = '<span class="label label-success">' . $status . '</span>';
                break;
            case 3 :
                $str = '<span class="label label-danger">' . $status . '</span>';
                break;
            case 4 :
                $str = '<span class="label label-succes">' . $status . '</span>';
                break;
            default :
                $str = $status;
                break;
        }

        return $str;
    }

    public static function getItemStatus() {
        return self::itemsAlias('status');
    }
    
    public static function getItemStatusConsider() {
        return self::itemsAlias('statusCondition');       
    }
*/
}
